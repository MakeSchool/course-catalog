---
title: CS  Computer Science
slug: 'cs-computer-science'
contentType: 'TextContent'
---

## CS: Computer Science 

Students in these courses will build on the foundational computer science and master concepts such as data structures, algorithm design and analysis, discrete math, probability, recursion, and object-oriented programming. Understanding these topics is necessary to build scalable software that can gracefully handle millions of users and data points. Technical interviews and programming challenges very often assess an applicantâ€™s ability to apply these skills and knowledge to a new problem. Students will write blog posts about these topics explaining how they work to understand deeper and bolster your online presence as a knowledgeable and proficient software engineer.

**CS 1.3****: Core Data Structures & Algorithms**** (ACS 2130)**

*Prerequisites: CS 1.2*

This course explores the foundations of computer science including discrete mathematics, abstract data types, data structures, and algorithm analysis and design. Students will compare and contrast iterative and recursive algorithms to analyze design and performance tradeoffs. Students will implement and test data structures including lists, stacks, queues, sets, maps, and trees. Students will then apply these to real-world problems like phone call routing to understand their tradeoffs. Students will also write technical blog articles about these topics to deepen understanding, improve technical writing, and bolster their online presence as knowledgeable and proficient software engineers. 

**CS 2.1****: Advanced Trees & Sorting Algorithms**** (ACS 31110)**

*Prerequisites: CS 1.3*

In this course students will implement and test advanced data structures and algorithms, analyze algorithmic complexity, benchmark performance in time and memory usage, and draw out elegant problem-solving techniques. Key concepts include divide-and-conquer recursion, sorting algorithms, heaps, tries, n-ary trees, and self-balancing trees. Students will build an original project that applies these data structures to real-world problems such as autocomplete, expression parsing, and phylogenetic trees. Students will also write technical blog articles about these topics to deepen understanding, improve technical writing, and bolster their online presence as knowledgeable and proficient software engineers. 

**CS 2.2****: Advanced Recursion & Graphs**** (ACS 3120)**

*Prerequisites: CS 1.3*

This course covers graph theory, data structures, algorithms, and analysis. Key concepts include recursion, greedy algorithms, dynamic programming, memoization, graph traversal, spanning trees, and network optimization. Students will build an original project whose underlying structure requires the use of graph structures and algorithms to solve real-world problems such as airplane routing, social networking, maze solving, and board games. Students will also write technical blog articles about these topics to deepen understanding, improve technical writing, and bolster their online presence as knowledgeable and proficient software engineers. 
